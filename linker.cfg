SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100; # 1 page stack
}

MEMORY {
    # 2K of RAM (builtin)
    # $0000-$0100 1 page for zeropage data
    # First section is used by the C runtime and the other is free to use.
    ZP1:            file = "", start = $0002, size = $001A, type = rw, define = yes;
    ZP2:            file = "", start = $001C, size = $00E2, type = rw, define = yes;
    # $0100-$0200 1 page for CPU Stack
    CPU_STACK:      file = "", start = $0100, size = $100, type = rw, define = yes;
    # $0200-$0300 1 page for OAM (Object Attribute Memory)
    OAM:            file = "", start = $0200, size = $100, type = rw, define = yes;
    # $0300-$0400 1 page for cc65 stack
    STACK:          file = "", start = $0300, size = __STACKSIZE__, define = yes;
    # $0400-$0800 4 pages of remaining RAM
    SYSTEM_RAM:     file = "", start = $0400, size = $0400, define = yes;

    # 8K of RAM (MMC3 mapper)
    CARTRIDGE_RAM:  file = "", start = $6000, size = $2000, define = yes;

    # INES Cartridge Header
    HEADER:         file = %O, start = $0000, size = $0010, fill = yes;

    # 64K lookup table to speedup Life algo
    LOOKUP_TABLE_ROM_BANKS: file = %O, start = $0000, size = $10000, fill = yes;

    # 8K Banks that we can swap in at $8000 and $A000 with the MMC3 controller.
    ROM_BANK_08: file = %O, start = $8000, size = $2000, fill = yes;
    ROM_BANK_09: file = %O, start = $8000, size = $2000, fill = yes;
    ROM_BANK_10: file = %O, start = $8000, size = $2000, fill = yes;
    ROM_BANK_11: file = %O, start = $8000, size = $2000, fill = yes;
    ROM_BANK_12: file = %O, start = $8000, size = $2000, fill = yes;
    ROM_BANK_13: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_14: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_15: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_16: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_17: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_18: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_19: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_20: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_21: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_22: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_23: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_24: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_25: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_26: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_27: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_28: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_29: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_30: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_31: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_32: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_33: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_34: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_35: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_36: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_37: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_38: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_39: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_40: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_41: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_42: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_43: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_44: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_45: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_46: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_47: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_48: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_49: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_50: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_51: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_52: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_53: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_54: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_55: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_56: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_57: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_58: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_59: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_60: file = %O, start = $8000, size = $2000, fill = yes;
    #ROM_BANK_61: file = %O, start = $8000, size = $2000, fill = yes;

    # The last 16K of the PRG ROM are fixed at $C000 - $FFFA
    ROM_BANK_FIXED: file = %O, start = $C000, size = $3FFA, fill = yes;

    # Hardware Vectors at the end of the PRG ROM
    ROM_VECTORS:    file = %O, start = $FFFA, size = $0006, fill = yes;

    # 8K CHR ROM Bank
    CHR_ROM:        file = %O, start = $0000, size = $2000, fill = yes;
}

SEGMENTS {
    ZEROPAGE: load = ZP1,            type = zp; # Used by CPU and C runtime
    ZPVARS:   load = ZP2,            type = zp;
    OAM:      load = OAM,            type = rw;
    INESHDR:  load = HEADER,         type = ro;
    STARTUP:  load = ROM_BANK_FIXED, type = ro,  define   = yes;
    LOWCODE:  load = ROM_BANK_FIXED, type = ro,  optional = yes;
    ONCE:     load = ROM_BANK_FIXED, type = ro,  optional = yes;
    CODE:     load = ROM_BANK_FIXED, type = ro,  define   = yes;
    RODATA:   load = ROM_BANK_FIXED, type = ro,  define   = yes;
    DATA:     load = ROM_BANK_FIXED, run = SYSTEM_RAM, type = rw,  define   = yes;
    VECTORS:  load = ROM_VECTORS,    type = rw;
    CHARS:    load = CHR_ROM,        type = rw;
    BSS:      load = CARTRIDGE_RAM,  type = bss, define   = yes;
    LOOKUP_TABLE:       load = LOOKUP_TABLE_ROM_BANKS, type = ro, define = yes;
    IDENTITY_TABLE:     load = ROM_BANK_FIXED, type = ro, define = yes, align = $100;
    LTA_CODE1:          load = ROM_BANK_FIXED, type = ro, define = yes;
    LTA_CODE2:          load = ROM_BANK_FIXED, type = ro, define = yes, align = $100;
    PPU_COPY_BUFFERS:   load = SYSTEM_RAM, type = rw, define = yes;
    SCENARIOS_BANK_8:   load = ROM_BANK_08, type = ro, define = yes;
    SCENARIOS_BANK_9:   load = ROM_BANK_09, type = ro, define = yes;
    SCENARIOS_BANK_10:  load = ROM_BANK_10, type = ro, define = yes;
    SCENARIOS_BANK_11:  load = ROM_BANK_11, type = ro, define = yes;
    SCENARIOS_BANK_12:  load = ROM_BANK_12, type = ro, define = yes;
    LIB_LOOKUP_TABLES:  load = ROM_BANK_FIXED, type = ro, define = yes, align = $100;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
